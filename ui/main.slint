// Copyright Â© SixtyFPS GmbH <info@slint.dev>
// SPDX-License-Identifier: MIT

import { SpinBox, Button, CheckBox, Slider, LineEdit, ScrollView, ListView,
    HorizontalBox, VerticalBox, GridBox, StandardButton } from "std-widgets.slint";

export struct TodoItem  {
    title: string,
    checked: bool,
}

component Circle inherits Rectangle {
    border-radius: root.width / 2;
    // animate x { duration: 250ms; easing: ease-in; }
    // animate y { duration: 250ms; easing: ease-in-out; }
    // animate background { duration: 250ms; }
}
// export global Logic  {
//     pure callback mouse-move(string) -> string;
// }
component MainWindow inherits Window {
    preferred-width: 400px;
    preferred-height: 600px;
    in-out property <int> picker-circle-radius: 40;
    in-out property <bool> picking-color-on-screen: false;

    in-out property <bool> moving: false;
    in-out property <bool> cursor-position-changed: false;

    // no-frame: picking-color-on-screen;
    no-frame: true;

    callback popup_confirmed;
    callback show_confirm_popup;

    callback apply_sorting_and_filtering();

    callback start-pick-screen-color();
    callback stop-pick-screen-color();
    callback copy-color-to-clipboard();
    pure callback mouse-move(string) -> string;

    show_confirm_popup => { confirm_popup.show(); }

    confirm_popup := PopupWindow {
        x: 40px;
        y: 100px;
        width: min(confirm_popup_layout.preferred-width, root.width - 80px);
        Rectangle {
            background: root.background;
            border-color: confirm_popup_text.color;
            border-width: 1px;
        }
        confirm_popup_layout := Dialog {
            height:100%; width: 100%;
            confirm_popup_text := Text {
                text: "Some items are not done, are you sure you wish to quit?";
                wrap: word-wrap;
            }
            StandardButton { kind: yes; clicked => { root.popup_confirmed(); } }
            StandardButton { kind: no; }
        }
    }
    in-out property <float> circle_position_x: 1.0;
    in-out property <float> circle_position_y: 1.0;
    in-out property <image> cursor-around-screenshot;
    in-out property <bool> has-image;
    in-out property <color> chosen-color: #FFFFFF;
    in-out property <string> chosen-color-description: "#FFFFFF / rgb(255,255,255)";

    background: picking-color-on-screen ? transparent : white;

    i-touch-area := TouchArea {
        width: 100%;
        height: 100%;

        visible: picking-color-on-screen;
        // mouse-cursor: none;
        clicked => {
            if (picking-color-on-screen) {
                root.picking-color-on-screen = false;
                root.stop-pick-screen-color();
                // root.background = i-touch-area.picked-color;
            }
        }
    }
    
    Circle {
        width: root.picker-circle-radius * 2 * 1px;
        height: root.picker-circle-radius * 2 * 1px;
        border-width: 0.1px;
        background: transparent;
        border-color: black;
        x: root.circle_position_x * 1px;
        y: root.circle_position_y * 1px;
        visible: has-image;
        clip: true;

        Image {
            visible: has-image;
            source: root.cursor-around-screenshot;
        }
    }

    Rectangle {
        width: 0.4px;
        height: root.picker-circle-radius * 2 * 1px;
        border-width: 0.2px;
        visible: has-image;
        x: (root.circle_position_x + root.picker-circle-radius) * 1px;
        y: root.circle_position_y * 1px;
        border-color: black;
    }


    Rectangle {
        width: root.picker-circle-radius * 2 * 1px;
        height: 0.4px;
        border-width: 0.2px;
        visible: has-image;
        x: root.circle_position_x * 1px;
        y: (root.circle_position_y + root.picker-circle-radius) * 1px;
        border-color: black;
    }

    Text {
        visible: false;
        text: {
            root.mouse-move(i-touch-area.mouse-x / 1px + "," + i-touch-area.mouse-y / 1px);
        }
    }
    VerticalBox {
        visible: !picking-color-on-screen;
        
        HorizontalBox {
            height: 10%;
            padding: 0px;

            pick-screen-color-btn := Button {
                width: 30%;
                // height: 50px;
                text: "Start Pick Screen Color!";
                clicked => {
                    root.picking-color-on-screen = true;
                    root.start-pick-screen-color();
                }
            }

            copy-color-btn := Button {
                width: 30%;
                // height: 50px;
                text: "Copy Color";
                clicked => {
                    root.copy-color-to-clipboard();
                }
            }
        }
        Rectangle {
            width: 30%;
            height: 10%;
            background: root.chosen-color;
            border-color: black;
            border-width: 1px;
            border-radius: 5px;
            padding: 5px;
            Text {
                text: root.chosen-color-description;
            }
        }
    }
}