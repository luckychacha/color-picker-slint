// Copyright Â© SixtyFPS GmbH <info@slint-ui.com>
// SPDX-License-Identifier: GPL-3.0-only OR LicenseRef-Slint-commercial

import { SpinBox, Button, CheckBox, Slider, LineEdit, ScrollView, ListView,
    HorizontalBox, VerticalBox, GridBox, StandardButton } from "std-widgets.slint";

export struct TodoItem  {
    title: string,
    checked: bool,
}

component Circle inherits Rectangle {
    width: 50px;
    height: 50px;
    border-width: 4px;
    border-radius: root.width / 10;
    // animate x { duration: 250ms; easing: ease-in; }
    // animate y { duration: 250ms; easing: ease-in-out; }
    // animate background { duration: 250ms; }
}

component MainWindow inherits Window {
    preferred-width: 400px;
    preferred-height: 600px;
    callback todo-added(string);
    callback remove-done();

    callback popup_confirmed;
    callback show_confirm_popup;
    in-out property <bool> show-circle: true;
    in-out property <color> circle_border_color: black;
    in-out property <float> circle_position_x: 1.0;
    in-out property <float> circle_position_y: 1.0;

    callback apply_sorting_and_filtering();
    
    Circle {
        background: transparent;
        border-color: root.circle_border_color;
        x: circle_position_x * 1px;
        y: circle_position_y * 1px;
        Image {
            source: @image-url("licon.png");
            visible: root.show-circle;
            // image-fit default is `contain` when in layout, preserving aspect ratio
        }
    }

    in property <[TodoItem]> todo-model: [
        { title: "Implement the .slint file", checked: true },
        { title: "Do the Rust part", checked: false },
        { title: "Make the C++ code", checked: false },
        { title: "Write some JavaScript code", checked: false },
        { title: "Test the application", checked: false },
        { title: "Ship to customer", checked: false },
        { title: "???", checked: false },
        { title: "Profit", checked: false },
    ];

    in property <bool> show-header: false;
    in-out property <bool> is-sort-by-name: false;
    in-out property <bool> hide-done-items: false;

    background: is-sort-by-name ? transparent : white;

    VerticalBox {
        HorizontalBox {
            text-edit := LineEdit {
                placeholder-text: "What needs to be done?";
                accepted(text) => {
                    root.todo-added(self.text);
                    self.text = "";
                }
            }
            btn := Button {
                text: "Add New Entry";
                enabled: text-edit.text != "";
                clicked => {
                    root.todo-added(text-edit.text);
                    text-edit.text = "";
                }
            }
        }

        if (root.show-header) : HorizontalBox { 
            alignment: start; 

            CheckBox {  
                text: "Sort by name";
                checked <=> root.is-sort-by-name;

                toggled => {
                    root.apply_sorting_and_filtering();
                }
            }

            CheckBox {  
                text: "Hide done items";
                checked <=> root.hide-done-items;

                toggled => {
                    root.apply_sorting_and_filtering();
                }
            }
        }

        list-view := ListView {
            for todo in root.todo-model:  HorizontalLayout {
                CheckBox {
                    text: todo.title;
                    checked: todo.checked;
                    toggled => {
                        todo.checked = self.checked;
                    }
                }
            }
        }
        HorizontalBox {
            alignment: end;
            Button {
                text: "Remove Done Items";
                clicked => { root.remove-done(); }
            }
        }
    }
}
